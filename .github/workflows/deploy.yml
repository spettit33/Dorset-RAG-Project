name: Deploy Lambda Functions

on:
  push:
    branches:
      - main  # Trigger the deployment when code is pushed to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Log in to AWS
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Get the list of Lambda functions from a predefined location (e.g., Lambda/src/*.py)
      - name: Get list of Lambda functions
        id: get_lambda_functions
        run: |
          # Assuming functions are defined by their Python filenames in Lambda/src/*.py
          functions=$(ls Lambda/src/*.py | sed 's/Lambda\/src\///' | sed 's/\.py//' | tr '\n' ' ')
          echo "functions=$functions" >> $GITHUB_ENV
          echo "functions=$functions"

      # Build and push Docker images to Docker Hub (dynamically per function)
      - name: Build and push Docker images
        run: |
          cd Lambda
          for function in $functions; do
            echo "Building and pushing Docker image for $function"
      
            # Dynamically select the Dockerfile based on the function
            DOCKERFILE="${function}.dockerfile"
            
            docker buildx build --platform linux/amd64 --provenance=false -f $DOCKERFILE -t $function:latest .

            docker images
      
            # Log in to AWS ECR
            aws ecr get-login-password --region ${{secrets.AWS_REGION}} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com
            
            # Check if the ECR repository exists
            REPOSITORY_EXISTS=$(aws ecr describe-repositories --repository-names "$function" --region ${{secrets.AWS_REGION}} 2>&1 || true)
      
            if [[ $REPOSITORY_EXISTS == *"repositoryNotFoundException"* ]]; then
              echo "Repository $function does not exist, creating..."
              # Create the repository if it doesn't exist
              aws ecr create-repository --repository-name "$function" --region ${{secrets.AWS_REGION}} --image-scanning-configuration scanOnPush=true --image-tag-mutability MUTABLE
            else
              echo "Repository $function already exists, skipping creation."
            fi
      
            # Tag the Docker image for ECR
            docker tag $function:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/$function:latest
            # Push the Docker image to ECR
            docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/$function:latest
          done

      # Check if each Lambda function exists, and create or update the Lambda functions
      - name: Deploy Lambda functions
        run: |
          for function in $functions; do
            echo "Deploying Lambda function: $function"

            # Define the Docker Hub image URI
            IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/$function:latest"

            # Check if the Lambda function exists
            if aws lambda get-function --function-name $function; then
                echo "Function $function exists, updating..."
                # Update the Lambda function with the new image from Docker Hub
                aws lambda update-function-code \
                    --function-name $function \
                    --image-uri $IMAGE_URI \
                    --publish
            else
                echo "Function $function does not exist, creating..."
                # Create a new Lambda function with the image from Docker Hub
                aws lambda create-function \
                    --function-name $function \
                    --package-type Image \
                    --code ImageUri=$IMAGE_URI \
                    --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/my-lambda-execution-role \
                    --publish
            fi
          done
